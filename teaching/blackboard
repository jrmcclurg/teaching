#!/usr/bin/python

##########################################
#  Blackboard assignment file processor  #
#  by Jedidiah R. McClurg                #
#  Northwestern University               #
#  2-10-2013                             #
##########################################

#import zipfile
import time
import re
import os, shutil
import sys, getopt
import subprocess

# this option needs to match the current specs of Blackboard
bbtimespec = "%Y-%m-%d-%H-%M-%S"

# these commands should be supported on your system
unrarcmd = ["unrar", "e", "-o+"]
unzipcmd = ["unzip", "-j", "-o"]

class Student:
    def __init__(self, firstname, lastname, uid):
        self.firstname = firstname
        self.lastname = lastname
        self.uid = uid
        self.submissions = {}
    def __str__(self):
        result = "Student["+(self.firstname)+" "+self.lastname+","+(self.uid)+"] {\n"
        for s, sub in self.submissions.iteritems():
            result += "  "+s+" => {"
            for x in sub:
                result += str(x)+","
            result += "},\n"
        #result += str(len(self.submissions))
        result += "}"
        return result

class Submission:
    def __init__(self, name, location):
        self.name = name
        self.location = location
    def __str__(self):
        return self.name

def replacespec(spec, uid, firstname, lastname):
    dirname = re.sub("%i", uid, spec)
    dirname = re.sub("%N", firstname, dirname)
    dirname = re.sub("%n", firstname.lower(), dirname)
    dirname = re.sub("%L", lastname, dirname)
    dirname = re.sub("%l", lastname.lower(), dirname)
    return dirname

def usage():
    print "Usage:"
    print "  blackboard [options] input_dir_or_file ..."
    print "Where possible options are:"
    print "  -d <dir>   Specifies the output directory"
    print "  -s <spec>  Sets the specification for the student folder names,"
    print "             where the variable %i will by replaced by the user"
    print "             id.  Other variables are %N and %L for first and last"
    print "             name, and these variables have a lowercase counterpart"
    print "             (e.g. %n, %l) which gives the lowercase values"
    print "  -b <spec>  Sets the specification for the submission folder names,"
    print "             where the variable %k is the 1-indexed submission"
    print "             number, and the python time-formatting variables can"
    print "             be used to get the submission timestamp"
    print "Example usages:"
    print "  blackboard -d temp mydir"
    print ""
    print "  This is the same as the below command, except that the default"
    print "  student directory names (%l_%n_%i) are used, as well as the default"
    print "  submission subdirectory names (submission%k_%m-%d-%Y_%H-%M-%S)."
    print ""
    print "  blackboard -d temp -s %i -b sub%k mydir"
    print ""
    print "  If mydir contains the raw assignment files downloaded from the"
    print "  Blackboard 'full grade center', this command produces the"
    print "  following type of directory structure:"
    print "    temp"
    print "      jsmith"
    print "         sub1"
    print "           someAssignmentFile.foo"
    print "           ..."
    print "         sub2"
    print "           ..."
    print "      jdoe"
    print "         sub1"
    print "           ..."
    print "  The most recent assignment files (e.g submission 2 for jsmith"
    print "  and submission1 for jdoe in this case) are also copied into"
    print "  the root dir for the corresponding student."
    sys.exit(2)

rootdir = os.getcwd()
devnull = open(os.devnull, "w")

def docall(cmd):
    try:
        subprocess.call(cmd, stdout=devnull, stderr=devnull)
        #subprocess.call(cmd)
    except Exception:
        raise

def copyfile(f, subdir):
    newloc = os.path.join(subdir, f.name)
    shutil.copyfile(f.location, newloc)
    #if flag:
    #    print "      ", f.location, " => ", subdir
    #print "      ", f.name
    #print "      ", f.location, " => ", newloc
    #print str(count), "\t", dirname, "\t", dirname2, "\t", f.name
    if f.name.lower().endswith(".rar"):
        os.chdir(subdir)
        docall(unrarcmd+[f.name])
        #os.chdir(rootdir)
    elif f.name.lower().endswith(".zip"):
        os.chdir(subdir)
        docall(unzipcmd+[f.name])
        #os.chdir(rootdir)

def main(argv):
    # initial values for the command-line options
    outputdir = rootdir
    outputspec = "%l_%n_%i" # $i is userid, $n is first name, $l is last name
    subspec = "submission%k_%m-%d-%Y_%H-%M-%S"

    inputfiles = []

    # parse the command-line arguments
    try:
        opts, files = getopt.getopt(argv,"hd:s:b:",["dir=","outspec=","subspec="])
    except getopt.GetoptError:
        usage()

    for opt, arg in opts:
        if opt == "-h":
            usage()
        elif opt in ("-d", "--dir"):
            outputdir = os.path.abspath(arg)
        elif opt in ("-s", "--outspec"):
            outputspec = arg
        elif opt in ("-b", "--subspec"):
            subspec = arg

    for f in files:
        if os.path.isdir(f):
            #print "adding dir: ", f
            inputfiles += map(lambda x : os.path.join(rootdir, f, x), os.listdir(f))
        else:
            #print "adding file: ", f
            inputfiles.append(f)

    students = {}

    for f in inputfiles:
        name = os.path.basename(f)
        try:
            m = re.search("([^_]*)_([^_]*)_[^_]*_([^_.]*)_?(.*)", name)
            assignment = m.group(1)
            uid = m.group(2)
            submission = m.group(3)
            filename = m.group(4)

            t = time.strptime(submission, bbtimespec)

            if not (uid in students):
                students[uid] = Student("", "", uid)

            if not (t in students[uid].submissions):
                students[uid].submissions[t] = []

            if filename == ".txt":
                h = open(f, "r")
                for line in h:
                    try:
                        m2 = re.search("Name: *([^ ]*) *(.*?) *\\(", line)
                        students[uid].firstname = m2.group(1)
                        students[uid].lastname = m2.group(2)
                    except Exception:
                        pass
                h.close()
            else:
                students[uid].submissions[t].append(Submission(filename, f))
        except Exception as e:
            print "Error! ", sys.exc_info()[0]
            #raise

    numsubs = 0
    count = 1
    num = len(students)
    for uid, student in sorted(students.iteritems()):
        dirname = replacespec(outputspec, uid, student.firstname, student.lastname)
        createdir = os.path.join(outputdir, dirname)
        print dirname #, "(", count, "/", num, ")"
        index = len(student.submissions) 
        flag = True
        for t, sub in reversed(sorted(student.submissions.iteritems())):
            dirname2 = replacespec(subspec, uid, student.firstname, student.lastname)
            dirname2 = re.sub("%k", str(index), dirname2)
            dirname2 = time.strftime(dirname2, t)
            subdir = os.path.join(createdir, dirname2)
            print "   ", dirname2, "(", len(sub), "files)", time.strftime("%d-%m-%Y @ %H:%M:%S", t)
            numsubs += 1
            if not os.path.exists(subdir):
                os.makedirs(subdir)
            for f in sub:
                copyfile(f, subdir)
                if flag:
                    copyfile(f, createdir)
            index -= 1
            flag = False
        count += 1

    print "\nFinished:"
    print "Processed ", count-1, "students."
    print "Processed ", numsubs, "submissions."

# 2013-02-08-09-13-28  
# 2013-02-07-18-39-59
        

# call the main() function
main(sys.argv[1:])
